from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from app.states import Chat, Image
from aiogram.fsm.context import FSMContext
import app.keybords as kb
from app.generators import gpt_text, gpt_image
from app.database.requests import set_user, get_user, calculate_image, calculate_text, get_user_lc, create_order,check_status, update_user_balance
from decimal import Decimal
from aiogram.enums import ChatAction
from app.cryptomus import create_invoice, get_invoice
import data 

from aiogram.utils.keyboard import InlineKeyboardBuilder


import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


user = Router()
is_button_enabled = False


@user.message(F.text == '‚ùå–û—Ç–º–µ–Ω–∞')
@user.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await set_user(message.from_user.id)
    await message.answer('ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–Ø AI GPT-4 Bot, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–∞–º—ã–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ò–ò –º–æ–¥–µ–ª–∏!', reply_markup=kb.main)


@user.message(F.text == 'üí¨–ß–∞—Ç')
async def chatting(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if Decimal(user.balance)>0:
        await state.set_state(Chat.text)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å', reply_markup=kb.cancel)
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.')


@user.message(Chat.text)
async def chat_response(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if Decimal(user.balance)>0:
        await message.bot.send_chat_action(chat_id=message.from_user.id,action=ChatAction.TYPING)
        data = await state.get_data()
        history = data.get('history', [])
        history.append({"role": "user", "content": message.text})
        history = history[-20:]
        await state.set_state(Chat.wait)
        response = await gpt_text(history, 'gpt-4o')
        await calculate_text(message.from_user.id, response['usage'], 'gpt-4o', user)
        history.append({"role": "assistant", "content": response['response']})
        await state.update_data(history=history)
        await message.answer(response['response'],parse_mode='Markdown')
        await state.set_state(Chat.text)
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.')


@user.message(Chat.wait, ~F.text.startswith('/'))
async def wait_wait(message:Message):
    await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–µ–Ω–µ–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')


@user.message(Image.wait, ~F.text.startswith('/'))
async def wait_wait(message:Message):
    await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–µ–Ω–µ–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')


@user.message(F.text == 'üñº–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫')
async def chatting(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if Decimal(user.balance)>=0.06:
        await state.set_state(Image.text)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å', reply_markup=kb.cancel)
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.')


@user.message(Image.text)
async def chat_response(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if Decimal(user.balance)>=0.06:
        await state.set_state(Image.wait)
        await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.UPLOAD_PHOTO)
        response = await gpt_image(message.text, 'dall-e-3')
        await calculate_image(message.from_user.id, response['usage'], 'dall-e-3', user)
        print(response)
        try:
            await message.answer_photo(photo=response['response'])
        except Exception as e:
            print(e)
            await message.answer(response['response'])
        await state.set_state(Image.text)
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.')



@user.message(Command('contact'))
async def contact(message: Message):
    await message.answer('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!  –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –Ω–∞–ø—Ä—è–º—É—é üëá',reply_markup=kb.contact_inline)



@user.message(F.text == 'üö™–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def personal_cab(message: Message):
    user_id = message.from_user.id
    user_data = await get_user_lc(user_id)
    
    if user_data:
        tg_id, balance = user_data
        cabinet_text = (
            "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!* üòé \n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –±–∞–ª–∞–Ω—Å–æ–º –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞—Å—Ö–æ–¥–∞–º–∏. üí∞\n\n"
            "*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:* \n"
            f"‚Ä¢ **ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: `{tg_id}` üÜî\n"
            f"‚Ä¢ **–ë–∞–ª–∞–Ω—Å**: `{balance}$` üíµ \n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å —É–º–æ–º! üîß"
        )
    else:
        cabinet_text = "*–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ. ‚ùå"

    await message.answer(cabinet_text,reply_markup=kb.lc_inline, parse_mode='Markdown')


@user.callback_query(F.data == 'models_info')
async def models_info(callback_query: CallbackQuery):
    gpt_4_text = (
        "*‚ú® –ú–æ–¥–µ–ª—å GPT-4:*\n\n"
        "üöÄ **GPT-4** ‚Äî –º–æ—â–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –æ–±—â–µ–Ω–∏—è —Å –ò–ò.\n"
        "üìö **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞**: —Å—Ç–∞—Ç—å–∏, —Å—Ç–∏—Ö–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏.\n"
        "üí¨ **–ß–∞—Ç —Å –ò–ò**: –≤–µ–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤.\n"
        "üß† **–ü–æ–º–æ—â—å –≤ –æ–±—É—á–µ–Ω–∏–∏**: –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—â—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á.\n\n"
        "GPT-4 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–∞–º–∏. üåü"
    )

    dalle_3_text = (
        "*üé® –ú–æ–¥–µ–ª—å DALL¬∑E 3:*\n\n"
        "üñºÔ∏è **DALL¬∑E 3** ‚Äî –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
        "‚úèÔ∏è **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫.\n"
        "üåç **–ú–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ç–∏–ª–µ–π**: –æ—Ç —Ä–µ–∞–ª–∏–∑–º–∞ –¥–æ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏.\n\n"
        "DALL¬∑E 3 –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤–∞—à–∏ –∏–¥–µ–∏ –≤ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. üé®"
    )

    #await callback_query.message.delete()
    await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await callback_query.message.answer(gpt_4_text + "\n\n" + dalle_3_text,reply_markup=kb.back_lc, parse_mode="Markdown")


@user.callback_query(F.data == 'backlc')
async def go_back(callback_query: CallbackQuery):
    #user_id = callback_query.message.from_user.id
    await callback_query.message.delete()
    #await personal_cab(callback_query.message, user_id=user_id)
    await callback_query.answer()

@user.callback_query(F.data == 'add_funds')
async def add_funds(callback_query: CallbackQuery):
    balance_top_up_text = (
    "üí∏ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É**:\n"
    "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å **Cryptomus**. ü™ô\n\n"
    "üîó –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n"
    "üí∞ –ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º!"

)
    #await callback_query.message.delete()
    await callback_query.answer()
    await callback_query.message.answer(balance_top_up_text,reply_markup=kb.add_funds, parse_mode="Markdown")


@user.callback_query(F.data.in_(['amount_1', 'amount_2', 'amount_5', 'amount_10']))
async def handle_amount_selection(callback: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—É–º–º—É –∏–∑ callback_data
    selected_amount = callback.data.split('_')[1]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
    confirmation_text = (
        f"üí∏ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {selected_amount}$.\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.answer()
    await callback.message.answer(confirmation_text, parse_mode="Markdown")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –∏–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    #invoice = data.data1
    invoice = await create_invoice(callback.from_user.id, selected_amount)
    markup = InlineKeyboardBuilder().button(
        text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"o_{invoice['result']['uuid']}"
    )
    await create_order(invoice['result']['uuid'],invoice['result']['status'],callback.from_user.id,selected_amount)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    await callback.message.answer(
        f"üí∞ *–í–∞—à —Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!* \n\n"
        f"üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: [–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç]({invoice['result']['url']}) \n\n"
        f"üí≥ *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.*\n\n"
        f"‚ö° *–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞.*",
        reply_markup=markup.as_markup(),
        parse_mode="Markdown"
    )


@user.callback_query(F.data.startswith('o_'))
async def check_order(query:CallbackQuery):
    #invoice = data.data1
    invoice = await get_invoice(query.data.split("_")[1])
    order = await check_status( 'uuid',invoice['result']['uuid'] )

    if 'result' not in invoice:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—á–µ—Ç—É.")
        await query.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ.")
        return
        
    if invoice["result"]["status"] in {"paid", "paid_over"}:
        if order.is_processed == False:
            await update_user_balance(query.from_user.id, invoice['result']['uuid'],invoice['result']['amount'])
            await query.answer()
            await query.message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°—É–º–º–∞ –±—ã–ª–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.')
        else:
            await query.message.answer('–í–∞—à–∏ –¥–µ–Ω—å–≥–∏ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!')
    else:
        await query.answer()
        await query.message.answer('–í–∞—à —Å—á–µ—Ç –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.')


@user.message(F.text =='–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üì©')
async def support(message: Message):
    await message.answer('–ú—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏–¥–µ–∏ –∏–ª–∏ –≤–∞–º –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!', reply_markup=kb.contact_inline)






@user.message(Command('test'))
async def test_cryptomus(message: Message):
    invoice = await create_invoice(message.from_user.id)
    markup = InlineKeyboardBuilder().button(
        text= "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"o_{invoice['result']['uuid']}"
    )

    await message.answer(
        f"üí∞ *–í–∞—à —Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!* \n\n"
        f"üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: [–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç]({invoice['result']['url']}) \n\n"
        f"üí≥ *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.*\n\n"
        f"‚ö° *–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞.*",
        reply_markup=markup.as_markup(),
        parse_mode="Markdown"
    )
    

@user.callback_query(F.data == 'void')
async def void (callback: CallbackQuery):
    await callback.answer('üîí –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.', show_alert=True)
    #await callback.message.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥')